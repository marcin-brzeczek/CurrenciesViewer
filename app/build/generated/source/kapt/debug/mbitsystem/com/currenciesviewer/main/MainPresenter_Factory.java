// Generated by Dagger (https://google.github.io/dagger).
package mbitsystem.com.currenciesviewer.main;

import dagger.internal.Factory;
import javax.inject.Provider;
import mbitsystem.com.currenciesviewer.data.CurrencyInteractor;
import mbitsystem.com.currenciesviewer.utils.SchedulerProvider;

public final class MainPresenter_Factory implements Factory<MainPresenter> {
  private final Provider<CurrencyInteractor> currencyInteractorProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  public MainPresenter_Factory(
      Provider<CurrencyInteractor> currencyInteractorProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    this.currencyInteractorProvider = currencyInteractorProvider;
    this.schedulerProvider = schedulerProvider;
  }

  @Override
  public MainPresenter get() {
    return provideInstance(currencyInteractorProvider, schedulerProvider);
  }

  public static MainPresenter provideInstance(
      Provider<CurrencyInteractor> currencyInteractorProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    return new MainPresenter(currencyInteractorProvider.get(), schedulerProvider.get());
  }

  public static MainPresenter_Factory create(
      Provider<CurrencyInteractor> currencyInteractorProvider,
      Provider<SchedulerProvider> schedulerProvider) {
    return new MainPresenter_Factory(currencyInteractorProvider, schedulerProvider);
  }

  public static MainPresenter newMainPresenter(
      CurrencyInteractor currencyInteractor, SchedulerProvider schedulerProvider) {
    return new MainPresenter(currencyInteractor, schedulerProvider);
  }
}
