// Generated by Dagger (https://google.github.io/dagger).
package mbitsystem.com.currenciesviewer.injection;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import mbitsystem.com.currenciesviewer.data.CurrencyInteractor;
import mbitsystem.com.currenciesviewer.main.IMainPresenter;
import mbitsystem.com.currenciesviewer.utils.AppSchedulerProvider;

public final class AppModule_ProvidesMainPresenterFactory implements Factory<IMainPresenter> {
  private final AppModule module;

  private final Provider<CurrencyInteractor> currencyInteractorProvider;

  private final Provider<AppSchedulerProvider> schedulerProvider;

  public AppModule_ProvidesMainPresenterFactory(
      AppModule module,
      Provider<CurrencyInteractor> currencyInteractorProvider,
      Provider<AppSchedulerProvider> schedulerProvider) {
    this.module = module;
    this.currencyInteractorProvider = currencyInteractorProvider;
    this.schedulerProvider = schedulerProvider;
  }

  @Override
  public IMainPresenter get() {
    return provideInstance(module, currencyInteractorProvider, schedulerProvider);
  }

  public static IMainPresenter provideInstance(
      AppModule module,
      Provider<CurrencyInteractor> currencyInteractorProvider,
      Provider<AppSchedulerProvider> schedulerProvider) {
    return proxyProvidesMainPresenter(
        module, currencyInteractorProvider.get(), schedulerProvider.get());
  }

  public static AppModule_ProvidesMainPresenterFactory create(
      AppModule module,
      Provider<CurrencyInteractor> currencyInteractorProvider,
      Provider<AppSchedulerProvider> schedulerProvider) {
    return new AppModule_ProvidesMainPresenterFactory(
        module, currencyInteractorProvider, schedulerProvider);
  }

  public static IMainPresenter proxyProvidesMainPresenter(
      AppModule instance,
      CurrencyInteractor currencyInteractor,
      AppSchedulerProvider schedulerProvider) {
    return Preconditions.checkNotNull(
        instance.providesMainPresenter(currencyInteractor, schedulerProvider),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
