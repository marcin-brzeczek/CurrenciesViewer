// Generated by Dagger (https://google.github.io/dagger).
package mbitsystem.com.currenciesviewer.injection;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import mbitsystem.com.currenciesviewer.data.network.CurrenciesApi;
import retrofit2.Retrofit;

public final class ApiModule_ProvideApiFactory implements Factory<CurrenciesApi> {
  private final ApiModule module;

  private final Provider<Retrofit> retrofitProvider;

  public ApiModule_ProvideApiFactory(ApiModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public CurrenciesApi get() {
    return provideInstance(module, retrofitProvider);
  }

  public static CurrenciesApi provideInstance(
      ApiModule module, Provider<Retrofit> retrofitProvider) {
    return proxyProvideApi(module, retrofitProvider.get());
  }

  public static ApiModule_ProvideApiFactory create(
      ApiModule module, Provider<Retrofit> retrofitProvider) {
    return new ApiModule_ProvideApiFactory(module, retrofitProvider);
  }

  public static CurrenciesApi proxyProvideApi(ApiModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideApi(retrofit), "Cannot return null from a non-@Nullable @Provides method");
  }
}
